#!/usr/bin/env bash

set -e

# This script take the name of a branch (or any ref) as argument. It then
# iterates over all locals branches and check for each whether it has been
# merged into or rebased onto the given base branch. The names of these
# branches are printed to stdout.

while test $# -ne 0
do
    case "$1" in
    -n|--dry-run)
        # -n, --dry-run
        #    Don't actually remove anything, just show what would be done.
        dry_run=1
        ;;
    --)
        shift
        break;;
    *)
        break;;
    esac
    shift
done

if test $# -eq 1 ; then
    base_branch=$1
else
    base_branch=$(git get-mainbranch origin)
fi

# ensure the given base branch is a valid ref
git rev-list -n1 "$base_branch" > /dev/null

to_delete=""
for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/); do
    case $branch in
      $base_branch | hpcgap-default | stable* | bisect* | master | trunk | gh-pages ) continue ;;
    esac
    echo -n "." # progress bar

    diff=$(git rev-list -n1 --cherry-pick --right-only --no-merges "$base_branch"..."$branch")
    if [ -z "$diff" ]; then
        to_delete="$to_delete $branch"
    fi
done
printf "\r\033[0K" # clear progress bar

if [[ -z $to_delete ]] ; then
    echo "No merged or rebased branches found"
else
    #echo "To delete merged branches, enter this command:"
    echo "git branch -D $to_delete"
    if test -z "$dry_run" ; then
        git branch -D $to_delete
    fi
fi
